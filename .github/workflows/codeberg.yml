name: Rust CI/CD - Build & Release

on:
  push:
    tags:
      - "v*.*.*" # 当推送类似 v1.0.0 的 tag 时触发

jobs:
  # 构建 Linux 平台
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Build
        run: cargo build --release
      - name: Extract Version
        run: echo "VERSION=$(grep -m 1 '^version' Cargo.toml | cut -d '"' -f2)" >> $GITHUB_ENV
      - name: Package
        run: |
          mkdir -p release_artifacts
          cp target/release/lume release_artifacts/
          cd release_artifacts
          tar -czf ../lume-v${{ env.VERSION }}-x86_64-linux-gnu.tar.gz *
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: linux-artifact
          path: lume-v*.tar.gz

  # 构建 Windows 平台
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          targets: x86_64-pc-windows-gnu
      - name: Build
        run: cargo build --release
      - name: Extract Version
        run: |
          $version = (Get-Content -Path Cargo.toml -TotalCount 10 | Select-String -Pattern '^version' -First 1).Line.Split('"')[1]
          echo "VERSION=$version" >> $env:GITHUB_ENV
      - name: Package
        run: |
          mkdir release_artifacts
          copy target\release\lume.exe release_artifacts\
          cd release_artifacts
          Compress-Archive -Path * -DestinationPath ..\lume-v$env:VERSION-x86_64-pc-windows-gnu.zip
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-artifact
          path: lume-v*.zip

  # 构建 macOS 平台
  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Build
        run: cargo build --release
      - name: Extract Version
        run: echo "VERSION=$(grep -m 1 '^version' Cargo.toml | cut -d '"' -f2)" >> $GITHUB_ENV
      - name: Package
        run: |
          mkdir -p release_artifacts
          cp target/release/lume release_artifacts/
          cd release_artifacts
          tar -czf ../lume-v${{ env.VERSION }}-x86_64-apple-darwin.tar.gz *
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: macos-artifact
          path: lume-v*.tar.gz

  # 发布到 GitHub Release
  release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos]
    steps:
      - uses: actions/checkout@v3
      - name: Extract Version
        run: echo "VERSION=$(grep -m 1 '^version' Cargo.toml | cut -d '"' -f2)" >> $GITHUB_ENV
      - name: Download Linux Artifact
        uses: actions/download-artifact@v3
        with:
          name: linux-artifact
          path: release/linux
      - name: Download Windows Artifact
        uses: actions/download-artifact@v3
        with:
          name: windows-artifact
          path: release/windows
      - name: Download macOS Artifact
        uses: actions/download-artifact@v3
        with:
          name: macos-artifact
          path: release/macos
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload Linux Artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/linux/lume-v${{ env.VERSION }}-x86_64-linux-gnu.tar.gz
          asset_name: lume-v${{ env.VERSION }}-x86_64-linux-gnu.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload Windows Artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/windows/lume-v${{ env.VERSION }}-x86_64-pc-windows-gnu.zip
          asset_name: lume-v${{ env.VERSION }}-x86_64-pc-windows-gnu.zip
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload macOS Artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/macos/lume-v${{ env.VERSION }}-x86_64-apple-darwin.tar.gz
          asset_name: lume-v${{ env.VERSION }}-x86_64-apple-darwin.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}
