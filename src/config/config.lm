# ========== config for login mode ==========
# only login mode need PATH, other mode will retrieve it from parent shell.
if IS_LOGIN {
    let PATH = "/usr/local/bin:/usr/bin:/bin"
}

# ========== config for interactive mode ==========
if IS_INTERACTIVE {
    let logo = "
            ██╗     ██╗   ██╗███╗   ███╗███████╗
            ██║     ██║   ██║████╗ ████║██╔════╝
            ██║     ██║   ██║██╔████╔██║█████╗
            ██║     ██║   ██║██║╚██╔╝██║██╔══╝
            ███████╗╚██████╔╝██║ ╚═╝ ██║███████╗
            ╚══════╝ ╚═════╝ ╚═╝     ╚═╝╚══════╝
    "
    print logo.green().faint()

    # ====== base theme: 'dark', 'light', 'ayu_dark'
    LUME_THEME = 'ayu_dark'

    # ====== theme modify
    #LUME_THEME_CONFIG = {
    #    String::from("keyword") => "\x1b[38;5;170m".to_string(),           // 紫色 (#C678DD)
    #    ...
    #}
    # ====== default repl mode
    # LUME_VI_MODE = true

    # ====== default strict mode
    # let STRICT = true

    # ====== welcome msg
    # let LUME_WELCOME= "Welcome to Lumesh!"

    # ====== prompt
    # MODE: 1=use template; 2=use starship; 0=use default.
    let LUME_PROMPT_SETTINGS = {
        MODE: 1,
        TTL_SECS: 2
    }
    # template could be normal expression or func.
    # avaluable tmplate var: $CWD, $CWD_SHORT
    let LUME_PROMPT_TEMPLATE = (String.blue("$CWD_SHORT") + ">> ".bold().yellow())
    # if template is lambda/func, it will be evaluated everytime.
    # let LUME_PROMPT_TEMPLATE := x -> {
    #     String.format "{} {}{}{} " String.blue(x) String.green(String.bold("|")) \
    #     (if (fs.exists '.git') {git branch --show-current | String.cyan()} else "") \
    #     String.green(String.bold(">"))
    # }
    # ====== history file
    # let LUME_HISTORY_FILE = "/tmp/lume_histroy"

    # ====== report compute result type and values. default True.
    # let LUME_PRINT_DIRECT= False

    # ====== default AI Helper settings. following is default.
    let LUME_AI_CONFIG = {
        host: "localhost:11434",
        complete_url: "/completion",
        chat_url: "/v1/chat/completions",
        complete_max_tokens: 10,
        chat_max_tokens: 100,
        model: "",
        system_prompt: "you're a lumesh shell script helper",
    }

    # ====== sudo cmd for Alt+s
    let LUME_SUDO_CMD = "doas"

    # ====== key bindings
    # NONE:0, SHIFT:2, ALT:4, CTRL:8,
    # ALT_SHIFT:6, CTRL_SHIFT: 10, CTRL_ALT:12, CTRL_ALT_SHIFT:14
    let LUME_HOT_MODIFIER = 4
    let LUME_HOT_KEYS = {
        q: "exit",
        c: "clear",
        h: "Fs.read ~/.cache/.lume_history | String.lines() | Ui.pick('select history:') ?! | exec_str()",
        x: "Fs.read /tmp/bookmark | String.lines() | Ui.pick('select bookmark:') ?! | exec_str()",
        m: 'let cmd := "$CMD_CURRENT";let s = Into.str(cmd); if s {s+"\n" >> /tmp/bookmark;println "\t[MARKED]"}',
    }

    # ====== abbreviations
    let LUME_ABBREVIATIONS = {
        xi: 'doas pacman -S',
        xup: 'doas pacman -Syu',
        xq: 'pacman -Q',
        xs: 'pacman -Ss',
        xr: 'doas pacman -Rs',
    }

    # ====== alias
    alias int = Into.int()
    alias str = Into.str()
    alias each = List.map()
    alias sort = List.sort()
    alias group = List.group()
    alias table = Parse.cmd()
    alias format = String.format()
    alias ll = Fs.ls -l
    alias lsx = ls -l --time-style=long-iso
    alias pls = Parse.cmd(mode,hlink,user,group,size,mday,mtime,name)
    alias join = List.join()
    alias chars = String.chars()
    alias open = Fs.read()
}
# else {
# ========== config for script mode ==========

# }

# ========== config for all mode ==========
# IFS affect: 0:never; 2:cmd args; 4:for; 8:string.split; 16:csv; 32:pick; 62:all
let LUME_IFS_MODE=2
# let LUME_MODULES_PATH=/tmp/mod
# let LUME_MAX_SYNTAX_RECURSION = 100
# let LUME_MAX_RUNTIME_RECURSION = 800
let concat = (x, y) -> (Into.str x) + (Into.str y)
# decorator func
fn timeit(){
    fn wrapper(func_ti){
        (args_ti) -> {
            let start = Time.stamp_ms()
            func_ti(args_ti)
            let end = Time.stamp_ms()
            print '>Time:'.green().bold() (end - start) 'ms'
        }
    }
}
