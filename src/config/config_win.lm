# ========== config for login mode ==========
# only login mode need PATH, other mode will retrieve it from parent shell.
if IS_LOGIN {
    let PATH = 'C:\;C:\Windows;C:\windows\system32;'
}

# ========== config for interactive mode ==========
if IS_INTERACTIVE {
    let logo = '
            ██╗     ██╗   ██╗███╗   ███╗███████╗
            ██║     ██║   ██║████╗ ████║██╔════╝
            ██║     ██║   ██║██╔████╔██║█████╗
            ██║     ██║   ██║██║╚██╔╝██║██╔══╝
            ███████╗╚██████╔╝██║ ╚═╝ ██║███████╗
            ╚══════╝ ╚═════╝ ╚═╝     ╚═╝╚══════╝
    '
    print logo.color('olive')

    # ====== base theme: 'one_dark', 'ayu_dark', 'light'
    LUME_THEME = 'ayu_dark'

    # ====== theme modify
    #LUME_THEME_CONFIG = {
    #    keyword: "\x1b[38;5;170m",
    #    ...
    #}
    # ====== default repl mode
    # LUME_VI_MODE = true

    # ====== default strict mode
    # let STRICT = true

    # ====== welcome msg
    # let LUME_WELCOME= 'Welcome to Lumesh!'

    # ====== prompt
    # MODE: 1=use template; 2=use starship; 0=use default.
    let LUME_PROMPT_SETTINGS = {
        MODE: 1,
        TTL_SECS: 2
    }
    # template could be normal expression or func.
    # avaluable tmplate var: $CWD, $CWD_SHORT
    let LUME_PROMPT_TEMPLATE = '$CWD_SHORT' + '>> '
    # if template is lambda/func, it will be evaluated everytime.
    # let LUME_PROMPT_TEMPLATE := x -> {
    #     String.format '{} {}{}{} ' String.blue(x) String.green(String.bold('|')) \
    #     (if (fs.exists '.git') {git branch --show-current | String.cyan()} else '') \
    #     String.green(String.bold('>'))
    # }
    # ====== history file
    # let LUME_HISTORY_FILE = '/tmp/lume_histroy'

    # ====== report compute result type and values. default True.
    # let LUME_PRINT_DIRECT= False

    # ====== default AI Helper settings. following is default.
    # let LUME_AI_CONFIG = {
    #     host: 'localhost:11434',
    #     complete_url: '/completion',
    #     chat_url: '/v1/chat/completions',
    #     complete_max_tokens: 10,
    #     chat_max_tokens: 100,
    #     model: '',
    #     system_prompt: "you're a lumesh shell script helper",
    # }

    # ====== sudo cmd for Alt+s
    let LUME_SUDO_CMD = 'doas'

    # ====== key bindings
    # NONE:0, SHIFT:2, ALT:4, CTRL:8,
    # ALT_SHIFT:6, CTRL_SHIFT: 10, CTRL_ALT:12, CTRL_ALT_SHIFT:14
    let LUME_HOT_MODIFIER = 4
    let LUME_HOT_KEYS = {
        q: 'exit',
        c: 'clear',
        h: "Fs.read ~/.cache/.lume_history | String.lines() | Ui.pick('select history:') ?! | exec_str()",
        x: "Fs.read ~\bookmark | String.lines() | Ui.pick('select bookmark:') ?! | exec_str()",
        m: 'let cmd := "$CMD_CURRENT";let s = Into.str(cmd); if s {s+"\n" >> ~\bookmark;println "\t[MARKED]"}',
    }

    # ====== abbreviations
    let LUME_ABBREVIATIONS = {
        xi: 'doas pacman -S',
        xup: 'doas pacman -Syu',
        xq: 'pacman -Q',
        xs: 'pacman -Ss',
        xr: 'doas pacman -Rs',
    }

    # ====== alias
    alias int = Into.int()
    alias str = Into.str()
    alias each = List.map()
    alias sort = List.sort()
    alias group = List.group()
    alias table = Into.table()
    alias format = String.format()
    alias join = List.join()
    alias open = Fs.read()
    alias cat = Fs.read()
    alias ls = Fs.ls('-l')
    alias mkdir = Fs.mkdir()
    alias touch = Fs.write()
    alias mv = Fs.mv()
    alias rm = Fs.rm()
    alias cp = Fs.cp()
    alias head = Fs.head()
    alias tail = Fs.tail()
    alias is_dir = Fs.is_dir()
    alias is_file = Fs.is_file()
    alias basename = Fs.base_name()
    alias dirname = Fs.dir_name()
}
# else {
# ========== config for script mode ==========

# }

# ========== config for all mode ==========
# IFS affect: 0:never; 2:cmd args; 4:for; 8:string.split; 16:csv; 32:pick; 62:all
let LUME_IFS_MODE=2
# let LUME_MODULES_PATH=/tmp/mod
# let LUME_MAX_SYNTAX_RECURSION = 100
# let LUME_MAX_RUNTIME_RECURSION = 800
let concat = (x, y) -> (Into.str x) + (Into.str y)
# decorator func
fn timeit(){
    fn wrapper(func_ti){
        (args_ti) -> {
            let start = Time.stamp_ms()
            func_ti(args_ti)
            let end = Time.stamp_ms()
            print '>Time:'.green().bold() (end - start) 'ms'
        }
    }
}
